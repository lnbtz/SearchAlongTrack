name: CI

on:
  push:
    branches: [develop, main]
  pull_request:
    branches: [develop, main]

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Lint â€¢ Typecheck â€¢ Test â€¢ Build â€¢ Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - run: npm ci
      - run: npm run lint
      - run: npm run check
      - run: npm run test:unit -- --run
      - run: npm run build
      - name: Security audit
        run: npm audit --audit-level moderate
      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: build/
          retention-days: 7

  quality-gate:
    name: Quality Gate
    if: github.event_name == 'pull_request'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Job summary
        run: |
          echo "## ðŸŽ¯ Quality Gate" >> $GITHUB_STEP_SUMMARY
          echo "- Lint: âœ…" >> $GITHUB_STEP_SUMMARY
          echo "- Typecheck: âœ…" >> $GITHUB_STEP_SUMMARY
          echo "- Unit tests: âœ…" >> $GITHUB_STEP_SUMMARY
          echo "- Build: âœ…" >> $GITHUB_STEP_SUMMARY
          echo "- Security audit: âœ…" >> $GITHUB_STEP_SUMMARY

      - name: Comment PR (same-repo only)
        if: ${{ github.event.pull_request.head.repo.full_name == github.repository }}
        uses: actions/github-script@v7
        with:
          script: |
            const body = `## ðŸŽ¯ Quality Gate Report

            âœ… All checks passed! This PR is ready for review.

            _This comment updates on new commits._`;
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number
            });
            const bot = comments.find(c => c.user.type === 'Bot' && c.body.includes('Quality Gate Report'));
            if (bot) {
              await github.rest.issues.updateComment({ owner: context.repo.owner, repo: context.repo.repo, comment_id: bot.id, body });
            } else {
              await github.rest.issues.createComment({ owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number, body });
            }
